
alias x.nb.vxdbms_env='. /usr/openv/db/vxdbms_env.sh'
alias x.nb.nbsucmds.old='grep -A1 " Command Used " *.txt | grep -v " Command Used " | grep -v "\-\-" | sed -e "s/-#/ -#/" | vim -'
alias x.nb.nbsucmdssubdirs.old='grep -R -A1 " Command Used " */*.txt | grep -v " Command Used " | grep -v "\-\-" | sed -e "s/-#/ -#/" | vim -'
alias x.nb.ff='find /usr/openv/ -name'
alias x.nb.localdata='function af.localdata() { if [ ! -e ~/nbdata ]; then mkdir $1/nbdata; ln -s -- $1/nbdata ~; else echo "~/nbdata exists"; fi;  if [ ! -e ~/custdata ]; then mkdir $1/custdata;  ln -s -- $1/custdata ~; else echo "~/custdata exists"; fi;  if [ ! -e ~/nbtestdata ]; then mkdir $1/nbtestdata;  ln -s -- $1/nbtestdata ~; else echo "~/nbtestdata exists"; fi; if [ ! -d ~/nbdata/quickTestEnv ]; then mkdir ~/nbdata/quickTestEnv; fi;  if [ ! -d ~/nbdata/tools ]; then mkdir ~/nbdata/tools; fi;  }; af.localdata'

# Edit commands NBU config
alias e.nb.bpconf='$CFG_EDITOR /usr/openv/netbackup/bp.conf'
alias e.nb.binver='$CFG_EDITOR /usr/openv/netbackup/bin/version'
alias e.nb.logconf='$CFG_EDITOR /usr/openv/netbackup/nblog.conf'
alias e.nb.ver='$CFG_EDITOR /usr/openv/netbackup/version'
alias e.nb.serverconf='$CFG_EDITOR /usr/openv/var/global/server.conf'
alias e.nb.vxdbmsconf='$CFG_EDITOR /usr/openv/db/data/vxdbms.conf'
alias e.bmr.srtcnf='$CFG_EDITOR /usr/openv/var/global/createsrt.conf'
alias e.nb.usercert='$CFG_EDITOR ~/.vxss/credentials'
alias e.nb.at.linfo='function af.enbatlinfo() { if [ ! -f ~/.atlogin$*.info ]; then echo "Takes authentication type, domain, user name, password, and broker information" >> ~/.atlogin$*.info; echo -e "unixpwd\n`hostname -s`\n${1:-$USER}\n" >> ~/.atlogin$*.info; chmod 600 ~/.atlogin$*.info; fi; $CFG_EDITOR ~/.atlogin$*.info; }; af.enbatlinfo'
alias e.an='$CFG_EDITOR ~/.vim/alias.nbu'
alias e.nb.db.op='$CFG_EDITOR dbisqlc.output.txt'
alias e.bmr.bndl='$CFG_EDITOR /usr/openv/netbackup/baremetal/client/data/bundle.dat'
alias e.bmr.clixml='$CFG_EDITOR /usr/openv/netbackup/baremetal/client/data/bmrcli.xml'
alias e.nb.java.authconf='$CFG_EDITOR /usr/openv/java/auth.conf'
alias e.nb.java.debug='$CFG_EDITOR /usr/openv/java/Debug.properties'
alias e.nb.at.conf='$CFG_EDITOR /usr/openv/var/global/vxss/eab/data/root/.VRTSat/profile/VRTSatlocal.conf'

alias e.nbc.at.conf='$CFG_EDITOR /usr/openv/var/vxss/at/root/.VRTSat/profile/VRTSatlocal.conf'

# quick data of nbu on terminal
alias cat.nb.bpconf='cat /usr/openv/netbackup/bp.conf'
alias cat.nb.binver='cat /usr/openv/netbackup/bin/version'
alias cat.nb.logconf='cat /usr/openv/netbackup/nblog.conf'
alias cat.nb.ver='cat /usr/openv/netbackup/version'
alias cat.nb.serverconf='cat /usr/openv/var/global/server.conf'
alias cat.nb.vxdbmsconf='cat /usr/openv/db/data/vxdbms.conf'
alias cat.nb.db.op='cat dbisqlc.output.txt'


# change dir quickly
alias cd.nbdt='af.cd ~/nbdata'
alias mcd.nbdt='mcd ~/nbdata'
alias cd.nbtstdt='af.cd ~/nbtestdata'
alias mcd.nbtstdt='mcd ~/nbtestdata'
alias cd.qte='af.cd ~/nbdata/quickTestEnv'
alias cd.cstdt='af.cd ~/custdata'
alias mcd.cstdt='mcd ~/custdata'
alias cd.nb='af.cd /usr/openv/netbackup'
alias cd.nb.logs='af.cd /usr/openv/netbackup/logs'
alias cd.nb.bin='af.cd /usr/openv/netbackup/bin'
alias cd.nb.adm='af.cd /usr/openv/netbackup/bin/admincmd'
alias cd.nb.gd='af.cd /usr/openv/netbackup/bin/goodies'
alias cd.ov='af.cd /usr/openv'
alias cd.ologs='af.cd /usr/openv/logs'
alias cd.nb.var='af.cd /usr/openv/var'
alias cd.nb.vxss='af.cd /usr/openv/var/vxss'
alias cd.nb.vgbl='af.cd /usr/openv/var/global'
alias cd.nb.gvxss='af.cd /usr/openv/var/global/vxss'
alias cd.nb.vxuprepo='af.cd /usr/openv/var/global/repo'
alias cd.nb.report='af.cd /usr/openv/var/global/report'
alias cd.nb.at='af.cd /usr/openv/netbackup/sec/at/bin'
alias cd.nb.odb='af.cd /usr/openv/db'
alias cd.nb.odb.data='af.cd /usr/openv/db/data'
alias cd.nb.odb.bin='af.cd /usr/openv/db/bin'
alias cd.nb.odb.log='af.cd /usr/openv/db/log'
alias cd.nb.odb.scripts='af.cd /usr/openv/db/scripts'
alias cd.nb.bkpcomp='af.cd /usr/openv/bkpcomp'
alias cd.nb.wmc='af.cd /usr/openv/wmc'
alias cd.nb.tc='af.cd /usr/openv/wmc/webserver'
alias cd.nb.wmcinstall='af.cd /usr/openv/wmc/bin/install'
alias cd.bmr.sd='af.cd /usr/openv/netbackup/baremetal/server/data'
alias cd.bmr.cd='af.cd /usr/openv/netbackup/baremetal/client/data'
alias cd.nb.db='af.cd /usr/openv/netbackup/db'
alias cd.nb.trylogs='af.cd /usr/openv/netbackup/db/jobs/trylogs'
alias cd.nb.floc='af.cd /usr/openv/netbackup/db/images'
alias cd.nb.vxms='af.cd /usr/openv/lib/map'
alias cd.nb.pbx='af.cd /opt/VRTSpbx'
alias cd.nb.usercert='af.cd ~/.vxss'
alias cd.nb.tmp='af.cd /usr/openv/tmp'
alias cd.nb.jre='af.cd /usr/openv/java/jre/bin'
alias cd.nb.java='af.cd /usr/openv/java'
alias cd.nb.tir='af.cd /usr/openv/netbackup/tir_info'

# NBU Misc command for quick ref
alias .nb.con='function af.nbconsole() { if [ "$1" != "" ]; then export ENG_VM_NAME=$1; fi; if [ "$ENG_VM_NAME" == "" ]; then echo "SET ENG_VM_NAME"; else jnbSA -d $ENG_VM_NAME & disown; fi; }; af.nbconsole'
alias .nb.img.cln='bpimage -cleanup -allclients; nbdelete -force -allvolumes'
alias .nb.img.ids='function af.imagelistids() { bpimagelist -U $*; $es ; bmimagelist -idonly $*; }; af.imagelistids'
alias .nb.img.del='bpexpdate -d 0'
alias .nb.pol.hwos='bppllist -hwos'
alias .nb.db.pass='nbdb_admin -dba'
alias .nb.db.pass.def='nbdb_admin -dba nbusql'
alias .nb.db.cnn.nb=' LD_LIBRARY_PATH=/usr/openv/db/lib:$LD_LIBRARY_PATH dbisqlc -c "CS=utf8;UID=dba;PWD=nbusql;LINKS=shmem,tcpip{PORT=13785};DBN=NBDB;SERVER=NB_`hostname -s`"'
alias .nb.db.cnn.az='LD_LIBRARY_PATH=/usr/openv/db/lib:$LD_LIBRARY_PATH dbisqlc -c "UID=dba;PWD=nbusql;DBN=NBAZDB;SERVER=NB_`hostname -s`"'
alias .nb.db.cnn.bmr='LD_LIBRARY_PATH=/usr/openv/db/lib:$LD_LIBRARY_PATH dbisqlc -c "CS=utf8;UID=dba;PWD=nbusql;LINKS=shmem,tcpip{PORT=13785};DBN=BMRDB;SERVER=NB_`hostname -s`"'
alias .nb.db.tbl.nb='LD_LIBRARY_PATH=/usr/openv/db/lib:$LD_LIBRARY_PATH dbisqlc -c "UID=dba;PWD=nbusql;DBN=NBDB;SERVER=NB_`hostname -s`" "select table_name from sys.systable;output to dbisqlc.output.txt"'
alias .nb.db.tbl.az='LD_LIBRARY_PATH=/usr/openv/db/lib:$LD_LIBRARY_PATH dbisqlc -c "UID=dba;PWD=nbusql;DBN=NBAZDB;SERVER=NB_`hostname -s`" "select table_name from sys.systable;output to dbisqlc.output.txt"'
alias .nb.db.qry.nb.qrow='function af.nb.db.cnb.qry.qrow() { LD_LIBRARY_PATH=/usr/openv/db/lib:$LD_LIBRARY_PATH dbisqlc -c "UID=dba;PWD=nbusql;DBN=NBDB;SERVER=NB_`hostname -s`" $* ">& dbisqlc.output.txt"; }; af.nb.db.cnb.qry.qrow'
alias .nb.db.qry.nb.row='function af.nb.db.cnb.qry.row() { LD_LIBRARY_PATH=/usr/openv/db/lib:$LD_LIBRARY_PATH dbisqlc -c "UID=dba;PWD=nbusql;DBN=NBDB;SERVER=NB_`hostname -s`" $*"; output to dbisqlc.output.txt";}; af.nb.db.cnb.qry.row'
alias .nb.cfg='bpgetconfig -s "localhost" -L'
alias .nb.propchg='bpgetconfig -d'
alias .nb.jb.actv='bpdbjobs -summary; $es; bpdbjobs | grep -v "Done"'
alias .nb.jb='bpdbjobs'
alias .nb.jb.keep4hr='bpdbjobs -clean -keep_hours 4'
alias .nb.jb.sum='function af.nbjobs() { bpdbjobs -summary $*; $es; bpdbjobs -report $*;}; af.nbjobs'
alias .nb.jb.trylog='function af.nbjbtrylog() { grep LOG /usr/openv/netbackup/db/jobs/trylogs/$1.t; }; af.nbjbtrylog'
alias .nb.jb.dtls..jbid='function af.nbjobsdetails() { bpdbjobs -jobid $* -all_columns | perl -pe '"'"'s{\\,}{_COMMA_}g;s{,}{\n}g; s{_COMMA_}{,}g;s{([^\n])(\d{2}/\d{2}/\d{4})}{$1\n$2}g;'"'"' | perl -ne '"'"'print if  m{^\d{2}/\d{2}/\d{4}}'"'"';}; af.nbjobsdetails'
alias .nb.cc='cat_convert -dump'
alias .nb.restart='bp.kill_all -v -f && bp.start_all -v -f'
# HIDDEN / NOT DOCUMENTED CMDS
alias .nb.slp.sch='nbstlutil dump -subsys 8'
alias .nb.slp.report='nbstlutil report'
alias .nb.slp.imglist='nbstlutil list -U'
alias .nb.slp.imgid='nbstlutil list -b'
alias .nb.slp.state='nbstlutil stlilist -U'
alias .nb.slp.cancel='nbstlutil cancel'
alias .nb.slp.name='nbstl -b'
alias .nb.slp.list='nbstl -U'
alias .nb.slp.det='nbstl -L'
alias .nb.at.login='function af.nbatlogin() { bpnbat -login && bpnbat -whoami; }; af.nbatlogin'
alias .nb.at.login.auto='function af.nbatlogin() { bpnbat -login -Info ~/.atlogin$*.info && bpnbat -whoami; }; af.nbatlogin'
alias .nb.at.loginweb='function af.nbatloginweb() { bpnbat -Login -logintype WEB && bpnbat -whoami; }; af.nbatloginweb'
alias .nb.at.loginweb.auto='function af.nbatloginweb() { bpnbat -Login -Info ~/.atlogin$*.info -logintype WEB && bpnbat -whoami; }; af.nbatloginweb'
alias .nb.jreup='nbcomponentupdate -comp jre -product netbackup'
alias .nb.pbx='/opt/VRTSpbx/bin/vxpbx_exchanged'
alias .nb.vxlmcln='vxlogmgr --auto --del -q'
alias .nb.vxlc6='vxlogcfg -a -p 51216 -s DebugLevel=6 -o '
alias .nb.vxlc0='vxlogcfg -r -p 51216 -s DebugLevel -o '
alias .nb.vxlcls.id='function af.nb.vxls() { vxlogcfg -l -p 51216 -o ${1:Default}; }; af.nb.vxls'
alias .nb.vxlclsall='function af.nbvxlall() { vxlogcfg -a -p 51216 -o Default -s DebugLevel=$*;}; af.nbvxlall'
alias .nb.vxlfids='grep OIDNames /usr/openv/netbackup/nblog.conf'
alias .nb.vxlv.prnt='echo echo vxlogview -G . -b '"'"'` date +"%m/%d/%y %r"`'"'"'|sh'
alias .nb.vxlv10min='vxlogview -G . -t 00:10:00'
alias .nb.vxlv60min='vxlogview -G . -t 01:00:00'
alias .nb.vxlv24h='vxlogview -G . -t 23:59:59'
alias .nb.vxlvall='vxlogview -G . -p 51216 -d all '
alias .nb.vxlvpbx='vxlogview -G /opt/VRTSpbx/log -p 50936 -d all'
alias .nb.setlog='echo VERBOSE=5 >> /usr/openv/netbackup/bp.conf'
alias .nb.setvxmslog='echo VXMS_VERBOSE=8 >> /usr/openv/netbackup/bp.conf'
alias .nb.eca.8121='function af.nbeca8121() { export CERT_HOSTNAME=`hostname -s`; echo /usr/openv/wmc/bin/install/configureWebServerCerts -addExternalCert -all -certPath /ECA/${CERT_HOSTNAME}_certstore/${CERT_HOSTNAME}.pem -privateKeyPath /ECA/${CERT_HOSTNAME}_certstore/keystore/privatekey.pem -trustStorePath /ECA/${CERT_HOSTNAME}_certstore/truststore/cacert.pem; echo ECA_CERT_PATH = /ECA/${CERT_HOSTNAME}_certstore/${CERT_HOSTNAME}.pem; echo ECA_TRUST_STORE_PATH = /ECA/${CERT_HOSTNAME}_certstore/truststore/cacert.pem; echo ECA_PRIVATE_KEY_PATH = /ECA/${CERT_HOSTNAME}_certstore/keystore/privatekey.pem; echo ECA_MASTER_SERVER_LIST = `hostname -f`; }; af.nbeca8121'
alias .nb.eca.enroll='af.esh nbcertcmd -enrollCertificate; $es; af.esh /usr/openv/netbackup/bin/nbcertcmd -getSecConfig -caUsage; $es; af.esh bpnbat -Login -logintype WEB && bpnbat -whoami; $es; af.esh nbhostmgmt -list;'
alias .nb.mux='echo https://`hostname -f`:1556/webui/login'
alias .nb.apidoc='echo https://`hostname -f`/api-docs/index.html'
alias .nb.logloc='function af.nb.logloc() { grep $@ /usr/openv/netbackup/nblog.conf /usr/openv/netbackup/logs/mklogdir; }; af.nb.logloc'
alias .nb.x509='vxsslcmd  x509 -text -noout -fingerprint -sha1 -in'
alias .nb.x509chn='function af.nb.x509chn() { vxsslcmd crl2pkcs7 -nocrl -certfile $1 | vxsslcmd pkcs7 -print_certs -text -noout ${@:2}; }; af.nb.x509chn'
alias .nb.jver='/usr/openv/java/jre/bin/java -version'
alias .nb.tcver='( . /usr/openv/wmc/bin/setenv && /usr/openv/wmc/webserver/bin/version.sh )'

# NBU uninstall commands to remove native packaging
alias .nb.uninst.linux='function af.nb.uninst.lr() { bp.kill_all -v -f ; for f in `rpm -qa | egrep "SYMC|VRTSnbclt|VRTSnetbp|VRTSnbjre|VRTSnbcfg|VRTSnbpck|VRTSnbjava|VRTSpddes|VRTSpddea|VRTSpdde|VRTSpostgresql|${1:-VRTSnb}" | sort `; do echo "uninstall $f"; rpm -qi $f;rpm -e $f --nodeps; if [ $? -ne 0 ]; then echo "*** failed to uninstall $f"; fi; done; if [ ! -z $1 ]; then rpm -q $1 >/dev/null && echo "Uninstalling $1.." && rpm -e $1; fi; cd /usr/openv; ls -l; }; af.nb.uninst.lr'
alias .nb.uninst.aix='function af.nb.uninst.aix() { for p in `lslpp -L | egrep -i "vrtspbx|VRTSnbclt|VRTSnetbp|VRTSnbjre|VRTSnbcfg|VRTSnbpck|VRTSnbjava|VRTSpddes|VRTSpddea" | awk '"'"'{ print $1 }'"'"'`; do echo $p; installp -u $p; done; }; af.nb.uninst.aix'
alias .nb.uninst.hp='function af.nb.uninst.hp() { for p in `swlist | egrep "VRTSnbclt|VRTSnetbp|VRTSnbjre|VRTSnbcfg|VRTSnbpck|VRTSnbjava|VRTSpddes|VRTSpddea|VRTSpbx"  | awk '"'"'{ print $1 }'"'"'`; do echo $p; swremove $p; done; }; af.nb.uninst.hp'
alias .nb.uninst.sol='function af.nb.uninst.sol() { for f in `pkginfo | egrep "SYMC|VRTSnbclt|VRTSnetbp|VRTSnbjre|VRTSnbcfg|VRTSnbpck|VRTSnbjava|VRTSpddes|VRTSpddea|${1:-VRTSnb}" | awk '"'"'{ print $2; }'"'"'`; do echo $f; yes y | pkgrm $f; done; if [ ! -z $1 ]; then echo "Uninstalling $1.."; yes y | pkgrm $1; fi;}; af.nb.uninst.sol'

alias .nb.createnbusers='groupadd nbwebgrp; useradd -g nbwebgrp -c "NetBackup Web Services account" -d /usr/openv/wmc nbwebsvc;groupadd nbgrp; useradd -g nbgrp -G nbwebgrp -c "NetBackup Service account" -d /usr/openv nbsvc'

# BMR specific commands
alias .bmr.cfg='bmrs -op list -res config'
alias .bmr.srt='bmrs -op list -res srt'
alias .bmr.list='bmrs -op list -res'
alias .bmr.tbl='bmrpans -op showtables'
alias .bmr.dmp..table='bmrpans -op dump -table'
alias .bmr.export.dmp.xml..client.cfg='function af.bmrdmpasxml() { bmrpans -op dump -type config -xml -clientname $1 -configname $2; }; af.bmrdmpasxml'
alias .bmr.import.load..xml='function af.bmrloadxml() { bmrpans -op load -type insert -in $1; }; af.bmrloadxml'
alias .bmr.export.qt.id2xml..id='function af.bmrqt.id2xml() { bmrs -op querytree -res database -table config -gui -id $1; }; af.bmrqt.id2xml'
alias .bmr.import.qt..clnt.xml='function af.bmrimportqtxml() { bmrs -op import -res config -client $1 -xmlpath $2; }; af.bmrimportqtxml'
alias .bmr.rstfile='bmrpans -op dump -table RestoreConfigFile'
alias .bmr.breg='bmrsetupboot -register'
alias .bmr.import..bndl='bmrs -op import -res config -path'
alias .bmr.prepscript..clnt='bmrprep -restore -config current -restorescriptonly -client'
alias .bmr.prepscript..clnt.cfg='function af.bmr.prep() { bmrprep -restore -config $2 -restorescriptonly -client $1; }; af.bmr.prep'
alias .bmr.prep..clnt.cfg.srt='function af.bmr.prep() { bmrprep -restore -client $1 -config $2 -srt $3 -logging ${@:4} ; }; af.bmr.prep'
alias .bmr.qtid..id='bmrs -op querytree -res database -table config -id'
alias .bmr.qtidgui..id='bmrs -o querytree -r database -table config -gui -id'
alias .bmr.pullrsF..clnt='bmrc -o pull -res info -sourc FFFFFFFF.restore -dest FFFFFFFF.restore -client'
alias .bmr.pushrsF..clnt='bmrc -o push -res info -sourc FFFFFFFF.restore -dest FFFFFFFF.restore -client'
alias .bmr.pull..clnt.hIp.fextn='function af.bmrpullconf() { bmrc -o pull -res info -client $1 -sourc $2.$3 -dest $1.$2.$3; }; af.bmrpullconf'
alias .bmr.push..clnt.hIp.fextn='function af.bmrpushconf() { bmrc -o push -res info -client $1 -sourc $1.$2.$3 -dest $2.$3; }; af.bmrpushconf'
alias .bmr.driverLoadOrder..cfgid='function af.bmrdriverloadorder() { bmrpans -op query -table BMR_LinuxScsiDriver -where "VolumeInfoId=$1" | awk '"'"'$1 == "DriverName" { print $3; }'"'"';}; af.bmrdriverloadorder'
alias .bmr.pullallscripts..clnt.hIp.appnd=' function af.bmrpullallscripts() { export PARA_CLIENTNAME=$1; export PARA_CLIENTHEXIP=$2; export PARA_APPEND=$3; for e in hosts bp.conf resolv.conf conf listfile diskdata info restore; do echo "Pulling $e file"; $PARA_ECHO bmrc -o pull -res info -cli $PARA_CLIENTNAME -source $PARA_CLIENTHEXIP.$e -dest ${PARA_CLIENTNAME}${PARA_APPEND}.$e; done; }; af.bmrpullallscripts'
alias .bmr.initrd.extract='function af.bmr.initrd.extract () { export RAND_DATE=`date +%Y%b%d_%H%M%S`; mkdir -p ~/nbdata/initrd/$RAND_DATE && cp isolinux/initrd.img ~/nbdata/initrd/initrd.img.gz && gunzip ~/nbdata/initrd/initrd.img.gz && pushd ~/nbdata/initrd/$RAND_DATE && cpio -id < ../initrd.img && popd; }; af.bmr.initrd.extract'
alias .bmr.cancelrstjob..clnt='bmrs -op complete -res restoretask -status 150 -client '
alias .bmr.vxlfids='grep OIDNames /usr/openv/netbackup/nblog.conf | grep -i "bmr"'
alias .bmr.db.crt=' LD_LIBRARY_PATH=/usr/openv/db/lib:$LD_LIBRARY_PATH dbinit -q -b -c -z UTF8 -p 4096  -dba dba,nbusql /usr/openv/db/data/BMRDB.db'
alias .bmr.db.tbl='LD_LIBRARY_PATH=/usr/openv/db/lib:$LD_LIBRARY_PATH dbisqlc -c "UID=dba;PWD=nbusql;DBN=BMRDB;SERVER=NB_`hostname -s`" "select table_name from sys.systable;output to dbisqlc.output.txt"'
alias .bmr.ip2num..ip='function af.ip2num { IP=$1; IPNUM=0; for (( i=0 ; i<4 ; ++i )); do ((IPNUM+=${IP%%.*}*$((256**$((3-${i})))))); IP=${IP#*.}; done; echo $IPNUM; }; af.ip2num '
alias .bmr.num2ip..num='function af.num2ip { echo -n $(($(($(($((${1}/256))/256))/256))%256)).; echo -n $(($(($((${1}/256))/256))%256)).; echo -n $(($((${1}/256))%256)).; echo $((${1}%256)); }; af.num2ip'
alias .bmr.genbndl='bmrsavecfg -infoonly'

# PostgreSQL
alias .nb.psql=' [[ ! -z $PGPORT && ! -z $PGUSER ]] &&  psql -h localhost -p $PGPORT -U $PGUSER -d NBDB -t -A -c '
alias .bmr.psql=' [[ ! -z $PGPORT && ! -z $PGUSER ]] && psql -h localhost -p $PGPORT -U $PGUSER -d BMRDB -t -A -c '
alias .bmr.psql.tbl=' [[ ! -z $PGPORT && ! -z $PGUSER ]] && psql -h localhost -p $PGPORT -U $PGUSER -d BMRDB -t -A -c "SELECT tablename FROM pg_catalog.pg_tables WHERE schemaname NOT IN ('"'"'pg_catalog'"'"', '"'"'information_schema'"'"');"'

alias bp.kill_all='bp.kill_all -v -f'
alias bp.start_all='bp.start_all -v -f'

alias a.bmr="alias   | grep ' \.bmr\..*='"
alias a.nb="alias   | grep ' \.nb\..*='"
alias a.nbc="alias   | grep ' \.nbc\..*='"
alias a.nb.all="alias   | egrep '\.?(nb|bmr|nbc)\..*='"
alias a.nbc.all="alias   | egrep '\.?(bmr|nbc)\..*='"

# quick access using exported variables
export nb='/usr/openv/netbackup'
export nbin='/usr/openv/netbackup/bin'
export nadm='/usr/openv/netbackup/bin/admincmd'
export ngds='/usr/openv/netbackup/bin/goodies'
export bmrcd='/usr/openv/netbackup/baremetal/client/data'
export nlogs='/usr/openv/netbackup/logs'
export ovlogs='/usr/openv/logs'
export opv='/usr/openv/'
export ngbl='/usr/openv/var/global'

export nbdt='~/nbdata'
export cstdt='~/custdata'
export nbtstdt='~/nbtestdata'


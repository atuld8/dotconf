if [[ "$JIRA_ACC_TOKEN" == "" ]]; then
  echo "JIRA_ACC_TOKEN is not defined"
fi

if [[ "$JIRA_SERVER_NAME" == "" ]]; then
  echo "JIRA_SERVER_NAME is not defined"
  exit 1
fi

if [[ "$JIRA_USER_NAME" == "" ]]; then
  echo "JIRA_USER_NAME is not defined"
  exit 1
fi

if [[ "$JIRA_USER_EMAIL" == "" ]]; then
  echo "JIRA_USER_EMAIL is not defined"
  exit 1
fi

export JIRA_ALIAS_EXTRA_OPT="--silent"

alias j.2.get='function af.jira_rest_call() { REST_ARG=$1; shift; curl $JIRA_ALIAS_EXTRA_OPT -H "Authorization: Bearer $JIRA_ACC_TOKEN" "https://$JIRA_SERVER_NAME/rest/api/2/$REST_ARG" $@; }; af.jira_rest_call'
alias j.3.get='function af.jira_rest_call() { REST_ARG=$1; shift; curl $JIRA_ALIAS_EXTRA_OPT -H "Authorization: Bearer $JIRA_ACC_TOKEN" "https://$JIRA_SERVER_NAME/rest/api/3/$REST_ARG" $@; }; af.jira_rest_call'
alias j.2.post='function af.jira_rest_call() { REST_ARG=$1; shift; curl $JIRA_ALIAS_EXTRA_OPT -H "Authorization: Bearer $JIRA_ACC_TOKEN" -X POST -H "Content-Type:application/json" "https://$JIRA_SERVER_NAME/rest/api/2/$REST_ARG" -d $@; }; af.jira_rest_call'
alias j.3.post='function af.jira_rest_call() { REST_ARG=$1; shift; curl $JIRA_ALIAS_EXTRA_OPT -H "Authorization: Bearer $JIRA_ACC_TOKEN" -X POST -H "Content-Type:application/json" "https://$JIRA_SERVER_NAME/rest/api/3/$REST_ARG" -d $@; }; af.jira_rest_call'
alias j.2.put='function af.jira_rest_call() { REST_ARG=$1; shift; curl $JIRA_ALIAS_EXTRA_OPT -H "Authorization: Bearer $JIRA_ACC_TOKEN" -X PUT -H "Content-Type:application/json" "https://$JIRA_SERVER_NAME/rest/api/2/$REST_ARG" -d $@; }; af.jira_rest_call'
alias j.3.put='function af.jira_rest_call() { REST_ARG=$1; shift; curl $JIRA_ALIAS_EXTRA_OPT -H "Authorization: Bearer $JIRA_ACC_TOKEN" -X PUT -H "Content-Type:application/json" "https://$JIRA_SERVER_NAME/rest/api/3/$REST_ARG" -d $@; }; af.jira_rest_call'

alias jq.fmt.issue_basic_details='jq -jr '"'"'"JiraID:\t\t",.key,"\n\n", "Summary:\t",.fields.summary,"\n\n", "Assignee:\t",.fields.assignee.name,"\n\n", "Reporter:\t",.fields.reporter.name,"\n\n", "IssueType:\t",.fields.issuetype.name,"\n\n", "IssueStatus:\t",.fields.status.name,"\n\n", "Labels:\t\t",(.fields.labels|join (" , ")),"\n\n", "Description: \n--------------\n",.fields.description,"\n--------------\n"'"'"''
alias jq.fmt.issue_basic_summary='jq -jr '"'"'"JiraID:\t\t",.key,"\n", "Summary:\t",.fields.summary,"\n", "Assignee:\t",.fields.assignee.name,"\n", "Reporter:\t",.fields.reporter.name,"\n", "IssueType:\t",.fields.issuetype.name,"\n", "IssueStatus:\t",.fields.status.name,"\n", "Labels:\t\t",(.fields.labels|join (" , ")),"\n", "\n--------------\n"'"'"''
alias jq.fmt.comments='jq '"'"'[.fields.comment.comments[].body]'"'"''

alias j.getIssueDet='function af.jira_get_issue() { j.2.get issue/$1 | jq.fmt.issue_basic_details; }; af.jira_get_issue'
alias j.getIssueBasic='function af.jira_get_issue() { j.2.get issue/$1 | jq.fmt.issue_basic_summary; }; af.jira_get_issue'
alias j.getIssueAll='function af.jira_get_issue() { j.2.get issue/$1 | jq .; }; af.jira_get_issue'
alias j.updateBldDetInSolution..bld.Jid='function af.jira_update_solution() { [[ "$1" =~ ^(NBSM|NBSVRUP)_[0-9.]+_[0-9]{4}$ ]] && [[ "$2" =~ ^NBU-[0-9]+$ ]] && echo "Updating the $2 ticket with build id $1" && j.updateFieldWithValue_id_field_value.sh $2 Solution \"*Target_Build:* {{$1}} \"; }; af.jira_update_solution'
alias j.getFieldList='function af.jira_get_fields() { j.2.get field | jq ".[].name"; }; af.jira_get_fields'
alias j.getFieldNameId='function af.jira_get_field.id_name() { j.2.get field | jq ".[] | {ID: .id, Name: .name}"; }; af.jira_get_field.id_name'
alias j.getFieldsForName='function af.jira_get_fields_for_name() { j.2.get field | jq ".[] | select(.name==\"$@\")"; }; af.jira_get_fields_for_name'

alias j.tknvrfy='curl $JIRA_ALIAS_EXTRA_OPT -H "Authorization: Bearer ${JIRA_ACC_TOKEN:-NULL}" -X GET https://$JIRA_SERVER_NAME/rest/api/2/myself | { output=`cat -`; if egrep -q "xml version|doctype html" <<<"$output"; then if egrep -q "doctype html" <<<"$output"; then XMLLINT_ARG="--html"; fi; echo "$output" | xmllint $XMLLINT_ARG --format -; else echo "$output" | jq .; fi; }'
alias j.tknupt='read -sp "Enter Jira Access Token (Hidden): " JIRA_ACC_TOKEN; export JIRA_ACC_TOKEN'

alias j.usrInEpic='echo -e "Users: $JIRA_EPIC_USERS_LIST\n\n"; IFS="," read -r -a users <<< "$JIRA_EPIC_USERS_LIST"; for user in "${users[@]}"; do $MVP/jira/j.getUserId.py "$user"; done | awk '"'"'BEGIN {print "Key               Name              Email-Address";print "----------------  ----------------  ----------------------------";} /@/ {printf "%-18s%-18s%-30s\n", $1, $2, $3}'"'"''

#export JIRA_ACC_TOKEN='Jtkn'
#export JIRA_WATCHERS_LIST="u1 u2"
#export JIRA_SERVER_NAME=".com"
#export JIRA_USER_NAME=''
#export JIRA_USER_EMAIL='@'
#export JIRA_PROJECT_NAME=''
#export JIRA_PROJECT_KEY=''
#export JIRA_WATCHER_GROUP='DL'
#export JIRA_LABELS="L1 L2"
#export JIRA_EPIC_LINK=""
#export JIRA_EPIC_USERS_LIST=""
#export JIRA_BOARD_NAME=""

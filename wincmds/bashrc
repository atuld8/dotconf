source ~/.alias
source ~/.vim/inputrc

# .bashrc
Red='\e[0;31m'
RED='\e[1;31m'
blue='\e[0;34m'
BLUE='\e[1;34m'
cyan='\e[0;36m'
CYAN='\e[1;36m'
BLACK='\e[0;30m'
GREEN='\e[0;32m'
PURPLE='\e[0;35m'
BROWN='\e[0;33m'
LIGHTGRAY='\e[0;37m'
DARKGRAY='\e[1;30m'
LIGHTBLUE='\e[1;34m'
LIGHTGREEN='\e[1;32m'
LIGHTCYAN='\e[1;36m'
LIGHTRED='\e[1;31m'
LIGHTPURPLE='\e[1;35m'
YELLOW='\e[1;33m'
WHITE='\e[1;37m'
NC='\e[0m'              # No Color


BGCOLOR="\e[47m"
ENDCOLOR="\e[m"
REDCOLOR="\e[0;31m"
PURPALCOLOR="\e[0;35m"
GREENCOLOR="\e[0;32m"
YELLOWCOLOR="\e[0;33m"

PROPNAMECOLOR=${BROWN}
PROPCOLOR=${LIGHTPURPLE}

PATH=$PATH:~/scripts:~/.vim/bin:~/.vim/scripts
export PATH

alias du='du -h'
alias l='ls -CF'
alias la='ls -A'
alias ll='ls -l'
alias l1='ls -1F'
alias l1a='ls -1Fa'
alias l.='ls --color=auto -d .?*'
alias ll.='ls --color=auto -dl .?*'
alias lsd='ls -d */'
alias lll='ls -la | less -X'
alias dir='ls -l'
# alias ls='ls -hF --color=tty'
alias mv='mv -i'
alias rm='rm -i'
alias df='df -h'
alias cp='cp -i'
alias ..='af.cd () { cd ../$1; }; af.cd'
alias ...='af.cd () { cd ../../$1; }; af.cd'
alias ....='af.cd () { cd ../../../$1; }; af.cd'
alias .....='af.cd () { cd ../../../../$1; }; af.cd'
alias clr="clear; pwd; ls -lrth"
alias paths='echo -e ${PATH//:/\\n}'

# Define this before calling current file into bash
#export PUNIN=''
#export PNE=''
#export NIS_USER=''
#export NIS_SERVE=''

# cygwin
OSName=`uname -o`
if [ "$OSName" = "Cygwin" ]; then
    OSVer=`uname -s`; PROCName=`uname -m`;
    alias install-apt-cyg='lynx -source rawgit.com/transcode-open/apt-cyg/master/apt-cyg > apt-cyg; install apt-cyg /bin '
fi
if [ "$OSName" = "GNU/Linux" ]; then
    OSVer=`uname -s`; PROCName=`uname -m`;
    alias install-apt-cyg='lynx -source rawgit.com/transcode-open/apt-cyg/master/apt-cyg > apt-cyg; install apt-cyg /bin '
fi

if [ -z "$GIT_STATUS_LEVEL" ]; then
    export GIT_STATUS_LEVEL=0
fi


parse_git_branch() {

    if [ "$GIT_STATUS_LEVEL" == "0" ]; then
        return;
    fi

    branch=`git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`

    if [ -n "$branch" ];
    then
        reponame=`basename $(git config --get remote.origin.url)| sed -e's/.git//g'`

        if [ "$GIT_STATUS_LEVEL" == "1" ]; then
            echo "($reponame @$branch)"
            return;
        fi

        if [ "$GIT_STATUS_LEVEL" == "2" ]; then
            git diff-files --no-ext-diff --quiet > /dev/null
            if [ $? -ne 0 ]; then
                echo "($reponame @$branch*)"
            else
                echo "($reponame @$branch.)"
            fi
            return;
        fi

        tracked=`git status --untracked-files=no --porcelain 2>/dev/null | wc -l | awk '{ print $1; }'`
        untracked=`git status --porcelain 2>/dev/null | wc -l | awk '{ print $1; }'`

        remote_Status="Ok"
        status_origin=`git status origin 2>/dev/null | grep -i "Your branch "`;

        status=`echo $status_origin | awk '{print $4; }'`;
        if [ "$status" == "behind" ]; then
            remote_Status="Pull"
        fi
        if [ "$status" == "ahead" ]; then
            remote_Status="Push"
        fi
        status=`echo $status_origin | awk '{print $6; }'`;
        if [ "$status" == "diverged," ]; then
            remote_Status="Merge"
        fi
        echo "($reponame @$branch T:+$tracked  UT:+$((untracked - tracked)) RS:$remote_Status)"
    fi

}

export TMUX_HOSTNAME=`hostname -s`
changeTmuxWindowsEveryTime() {
   PROMPT_COMMAND='printf "\033k${TMUX_HOSTNAME}\033\\"'
}

function last_three_dir {
    pwd |rev| awk -F / '{print $1,$2,$3}' | rev | sed s_\ _/_g | sed s_//_/_;
}

mcd() { mkdir -p "$1" && cd "$1"; }

bcd() {
    local levels=${1:-0}
    local maxlevel=$((`echo $PWD |sed 's/[^/]//g'|wc -m`-1 ))

    if [ $levels -gt  $maxlevel ];
    then
        levels=$maxlevel;
    fi

    local bcdpath="."
    while ((levels > 0)); do
            bcdpath=$bcdpath"/.."
            let "levels--"
    done
    cd $bcdpath || break
}
CurrDirDepth() {
    echo `pwd | awk -F"/" '{print NF - 1 ; }'`
}

GetGBaseParent() {
    if [ "$GIT_STATUS_LEVEL" == "0" ]; then
        return;
    fi

    local gbase=`git rev-parse --show-toplevel 2>/dev/null`;
    local subfolder=
    local parentfolder=
    if [ "$gbase"x != ""x ]; then
        subfolder=`basename $(dirname $gbase)`;
        if [ "$subfolder" != "/" ]; then
            parentfolder=`basename $(dirname $(dirname $gbase))`;
            if [ "$parentfolder" == "/" ]; then
                parentfolder=""
            fi
            echo "<$parentfolder/$subfolder> "
        else
            echo "<$subfolder> "
            #echo ${PROPNAMECOLOR}${BG}gprnt:${PROPCOLOR}${BG}$subfolder${PROPNAMECOLOR}${BG}
        fi
    fi
}

UpdateTmuxWinIdx () {
    if [ ! -z "$TMUX" ]; then
        export TMUX_WINIDX="["$(tmux display-message -p '#I')"."$(tmux display-message -p '#P')"] "
    fi
    if [ ! -z "$WINDOW" ]; then
        export TMUX_WINIDX="[$WINDOW] "
    fi
    echo "$TMUX_WINIDX"
}

# \W basename of current directory
SetShortTrap()
{
   local DOName=""
   export PROMPT_DIRTRIM=3
   export TMUX_WINIDX=""
   if [ ! -z "$TMUX" ]; then
       export TMUX_WINIDX="["$(tmux display-message -p '#I')"."$(tmux display-message -p '#P')"] "
   fi
   if [ ! -z "$WINDOW" ]; then
       export TMUX_WINIDX="[$WINDOW] "
   fi
   trap 'PS1="\n${PROPNAMECOLOR}${BG}(\$((\! -1)) ${PROPNAMECOLOR}${BG}RC:${RED}${BG}\${?##0}${GREEN}${BG}\${?##[1-9]*}${PROPNAMECOLOR}${BG}) ${PROPNAMECOLOR}${BG}Date:${PROPCOLOR}${BG}\D{%d-%b-%y} \D{%T %Z} ${PROPNAMECOLOR}${BG}Jobs:${PROPCOLOR}${BG}\j${PROPNAMECOLOR}${BG} Files:${PROPCOLOR}$(( $( ls -A | wc -l ) - 0 )) ${PROPNAMECOLOR}HdnFiles:${PROPCOLOR}$(( $( ls -A | wc -l ) - $( ls | wc -l ) )) ${PROPNAMECOLOR}pushd:${PROPCOLOR}$(( $( dirs -v | wc -l ) - 1 )) ${PROPNAMECOLOR}${BG}DskUsg:${PROPCOLOR}${BG}\$([ -f ~/bin/rootDiskUsage.sh ] && ~/bin/rootDiskUsage.sh)${PROPNAMECOLOR}${BG} ${PROPNAMECOLOR}${BG}Os:${PROPCOLOR}${BG}$OSVer${PROPNAMECOLOR}${BG} ${PURPLE}${BG}\$(GetGBaseParent)${NC}${PROPNAMECOLOR}${COLOR_USER}${BG}${USERNAME}${PROPNAMECOLOR}${BG}@${LIGHTPURPLE}${BG}${HOSTNAME%%.*}${DOName}${PROPNAMECOLOR}${BG}:${PURPLE}${BG}\w${NC} ${BROWN}${BG}\$(parse_git_branch)${NC}\n\${SPECIAL_PRMPT_DATA}\$(UpdateTmuxWinIdx)Cmd$ "' DEBUG
}

SetBasicTrap()
{
   local DOName=""
   export PROMPT_DIRTRIM=3
   export TMUX_WINIDX=""
   if [ ! -z "$TMUX" ]; then
       export TMUX_WINIDX="["$(tmux display-message -p '#I')"."$(tmux display-message -p '#P')"] "
   fi
   if [ ! -z "$WINDOW" ]; then
       export TMUX_WINIDX="[$WINDOW] "
   fi
   trap 'PS1="\n${PROPNAMECOLOR}${BG}(\$((\! -1)) $(((SHLVL>1))&&echo "SL:$SHLVL ")${PROPNAMECOLOR}${BG}RC:${RED}${BG}\${?##0}${GREEN}${BG}\${?##[1-9]*}${PROPNAMECOLOR}${BG}) ${PROPNAMECOLOR}${BG}Date:${PROPCOLOR}${BG}\D{%d-%b-%y} \D{%T %Z} ${PROPNAMECOLOR}${BG}Os:${PROPCOLOR}${BG}$OSVer${PROPNAMECOLOR}${BG} ${PURPLE}${BG}\$(GetGBaseParent)${NC}${PROPNAMECOLOR}${COLOR_USER}${BG}${USERNAME}${PROPNAMECOLOR}${BG}@${LIGHTPURPLE}${BG}${HOSTNAME%%.*}${DOName}${PROPNAMECOLOR}${BG}:${PURPLE}${BG}\w${NC} ${BROWN}${BG}\$(parse_git_branch)${NC}\n\${SPECIAL_PRMPT_DATA}\$(UpdateTmuxWinIdx)Cmd$ "' DEBUG
}

SetBasicTrap

trimoutput() {
    local MAX_CHARS=`stty size | awk '{ print $2 }'`
    $* | cut -c -$MAX_CHARS
}

myssh ()
{
    ssh -X -Y -o "TCPKeepAlive=yes" -o "ServerAliveInterval=90" -o "ServerAliveCountMax=10" -o "ForwardX11=yes" $1
}

mysshtest ()
{
    echo $1 | grep "@" > /dev/null
    if [ $? -ne 0 ]; then
        echo "Please specify user@host";
        return;
    fi

    ssh -o "BatchMode yes" $1 "ls > /dev/null" > /dev/null 2>&1
    if [ $? -ne 0 ]; then
        echo "Setting passwordless login";
        ssh -X -Y -o "TCPKeepAlive=yes" -o "ServerAliveInterval=90" -o "ServerAliveCountMax=10" -o "ForwardX11=yes" $1 "mkdir ~/.ssh; echo `cat ~/.ssh/id_rsa.pub` >> ~/.ssh/authorized_keys; chmod 700 ~/.ssh; chmod 644 ~/.ssh/authorized_keys"
        ssh -o "BatchMode yes" $1 "ls > /dev/null" > /dev/null 2>&1
        if [ $? -ne 0 ]; then
            echo "Coping custom bashrc";
            tar cf - -C ~/.vim/ bashrc | ssh -X -Y -o "TCPKeepAlive=yes" -o "ServerAliveInterval=90" -o "ServerAliveCountMax=10" -o "ForwardX11=yes" $1 "tar xf - > /dev/null 2>&1;"
            echo "Logging to bash";
            ssh -X -Y -o "TCPKeepAlive=yes" -o "ServerAliveInterval=90" -o "ServerAliveCountMax=10" -o "ForwardX11=yes" -t $1 "bash --rcfile ~/bashrc -i;"
        else
            echo "Coping custom bashrc";
            tar cf - -C ~/.vim bashrc | ssh -X -Y -o "TCPKeepAlive=yes" -o "ServerAliveInterval=90" -o "ServerAliveCountMax=10" -o "BatchMode yes"  -o "ForwardX11=yes" $1 "tar xf - > /dev/null 2>&1;"
            echo "Logging to bash";
            ssh -X -Y -o "TCPKeepAlive=yes" -o "ServerAliveInterval=90" -o "ServerAliveCountMax=10" -o "ForwardX11=yes" -o "BatchMode yes" -t $1 "bash --rcfile ~/bashrc -i;"
        fi
    else
        echo "Coping custom bashrc";
        tar cf - -C ~/.vim bashrc | ssh -X -Y -o "TCPKeepAlive=yes" -o "ServerAliveInterval=90" -o "ServerAliveCountMax=10" -o "BatchMode yes"  -o "ForwardX11=yes" $1 "tar xf - > /dev/null 2>&1;"
        echo "Logging to bash";
        tmux rename-window "$(echo $* | cut -d @ -f2)"
        ssh -X -Y -o "TCPKeepAlive=yes" -o "ServerAliveInterval=90" -o "ServerAliveCountMax=10" -o "ForwardX11=yes" -o "BatchMode yes" -t $1 "bash --rcfile ~/.bashrc -i;"
    fi
}

mysshcftatuld ()
{
    mysshtest atuld@pcft-vm${1}.$PUNIN
}

mysshcft ()
{
    echo $1 | egrep "[0-9]*" > /dev/null
    if [ $? -ne 0 ]; then
        return;
    fi
    mysshtest root@pcft-vm${1}.$PUNIN
}

mysshcftpneatuld ()
{
    mysshtest atuld@pcft-vm${1}.$PNE
}

mysshcftpne ()
{
    echo $1 | egrep "[0-9]*" > /dev/null
    if [ $? -ne 0 ]; then
        return;
    fi
    mysshtest root@pcft-vm${1}.$PNE
}

mysshpass ()
{
    echo "Coping custom bashrc";
    tar cf - -C ~/.vim bashrc | sshpass -f ~/.stdpass ssh -X -Y -o "TCPKeepAlive=yes" -o "ServerAliveInterval=90" -o "ServerAliveCountMax=10" -o "BatchMode yes" -o "ForwardX11=yes" $1 "tar xf - > /dev/null 2>&1;";
    echo "Logging to bash";
    sshpass -f ~/.stdpass ssh -X -Y -o "TCPKeepAlive=yes" -o "ServerAliveInterval=90" -o "ServerAliveCountMax=10" -o "ForwardX11=yes" -o "BatchMode yes" -t $1 "bash --rcfile ~/bashrc -i;"
}

mcd() { mkdir -p "$1" && cd "$1"; }
##########################
# tmux funtions start
##########################

function tmuxv {
    tmux split-window -dh "$*"
}

function tmanv {
    tmux split-window -dh "man $*"
}

function tmanh {
    tmux split-window -dv "man $*"
}

function tmuxh {
    tmux split-window -dv "$*"
}

function ttmux {
    local SID=`tty | cut -d'/' -f4`
    echo $1 | egrep "[0-9]+" > /dev/null
    if [ $? -eq 0 ]; then
        SID=$1
    fi

    if [ "$1" == "ls" ]; then
        CMD="tmux ls";
    else
        CMD="tmux attach -d -t tmux_$SID || tmux new -s tmux_$SID"
    fi
    ssh -X -Y -o "TCPKeepAlive=yes" -o "ServerAliveInterval=90" -o "ServerAliveCountMax=10" -o "ForwardX11=yes" -t $NIS_USER@$NIS_SERVER $CMD
}

function tscreen {
    local SID=`tty | cut -d'/' -f4`
    echo $1 | egrep "[0-9]+" > /dev/null
    if [ $? -eq 0 ]; then
        SID=$1
    fi

    if [ "$1" == "ls" ]; then
        CMD="screen -ls";
    else
        CMD="screen -d -R tmux_$SID"
    fi
    ssh -X -Y -o "TCPKeepAlive=yes" -o "ServerAliveInterval=90" -o "ServerAliveCountMax=10" -o "ForwardX11=yes" -t $NIS_USER@$NIS_SERVER $CMD
}
##########################
# tmux funtions end
##########################


##########################
# git funtions start
##########################
function gfuncdiff() {
    for f in  `git diff --name-only $1`; do git diff $1 $f; done
}

function gstashclone () {
    if [ "$1" == "" ]; then
        echo "Error: Argument expected.."
    else
        git clone ${USER_STASH_URL}
    fi
}

##########################
# git funtions end
##########################

if [ -f /usr/bin/banner ]; then banner "wel-come" && banner "$USER"; fi


myhelp () {
echo "Below are the alias and functions you have"
echo "********************"
echo "********************"
alias
echo "********************"
echo function name
echo "   bcd # == back to # no dir"
echo "   mcd <path> == create dirs and cd to newly creared dir"
echo "********************"
declare -F
echo "********************"
}
